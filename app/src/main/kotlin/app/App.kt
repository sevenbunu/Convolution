/*
 * This source file was generated by the Gradle 'init' task
 */
package app

import convolution.convolution
import picocli.CommandLine
import picocli.CommandLine.Command
import picocli.CommandLine.Option
import pipeline.startPipeline
import java.io.File
import java.util.concurrent.Callable
import kotlin.system.exitProcess

fun main(args: Array<String>) {
    exitProcess(CommandLine(Input()).execute(*args))
}

@Command(
    name = "input",
    mixinStandardHelpOptions = true,
    version = ["checksum 4.0"],
    description = ["Prints the checksum (SHA-256 by default) of a file to STDOUT."],
)
class Input : Callable<Int> {
    @Option(names = ["-i", "--input"], description = ["input image name"], required = true)
    lateinit var inputImage: String

    @Option(names = ["-o", "--output"], description = ["output image name"], required = true)
    lateinit var outputImage: String

    @Option(names = ["-m", "--mode"], description = ["output image name"])
    var mode: String = "seq"

    @Option(names = ["-b", "--batch"], description = ["output image name"])
    var batchSize: Int = 1

    @Option(names = ["-h", "--height"], description = ["output image name"])
    var rectHeight: Int = 1

    @Option(names = ["-w", "--width"], description = ["output image name"])
    var rectWidth: Int = 1

    @Option(names = ["-f", "--filter"], description = ["output image name"])
    var filter: String = "id"

    @Option(names = ["-p", "--pipeline"], description = ["output image name"])
    var pipeline: String = "sync"

    override fun call(): Int {
        var input = File(inputImage)
        var output = File(outputImage)
        if ((input.isDirectory && output.isDirectory) || (input.isDirectory && !output.exists())) {
            startPipeline(pipeline, mode, filter, input, output, batchSize, rectHeight, rectWidth)
        } else {
            val path = "./src/main/resources/"
            input = File(path + inputImage)
            output = File(path + outputImage)
            try {
                convolution(mode, filter, input, output, batchSize, rectHeight, rectWidth)
            } catch (e: IllegalArgumentException) {
                println(e)
                return 1
            }
        }
        return 0
    }
}
